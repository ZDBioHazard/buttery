#!/bin/sh
# vim: set tabstop=4 shiftwidth=4 softtabstop=4 expandtab
#
# COPYRIGHT INFO
#
# Copyright (c) 2015-2022 Ryan "ZDBioHazard" Turner <zdbiohazard2@gmail.com>
#
# LICENSE
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>
#
set -o pipefail

# ----------------------------------------------------------------------------
# Function definitions
# ----------------------------------------------------------------------------

show_help() {
    echo "Usage: $(basename "${0}") [options] SNAPDIR [SUBVOLUME ...]"
    echo " Options:"
    echo "  --help                      Show this help and exit"
    echo "  -n, --dry-run               Explain what would be done, without"
    echo "                              actually doing anything"
    echo "  -v, --verbose               Print more operation messages,"
    echo "                              particularly about purge selection"
    echo ""
    echo "  -r, --remote=PATH           Path to use as the 'btrfs receive'"
    echo "                              destination"
    echo "  -c, --remote-cmd=COMMAND    Path to the 'btrfs' command for"
    echo "                              'btrfs receive' (Default: 'btrfs')"
    echo "  -N, --remote-name=NAME      Name of the remote connection"
    echo "                              (Default: 'remote')"
    echo ""
    echo "  -p, --purge[=NAME]          Purge old snapshots that match NAME."
    echo "                              May be specified multiple times"
    echo "  -h, --hourly=DAYS           Maximum age of hourly snapshots"
    echo "                              (Default: 1, implies '--purge')"
    echo "  -d, --daily=DAYS            Maximum age of daily snapshots"
    echo "                              (Default: 14, implies '--purge')"
    echo "  -w, --weekly=DAYS           Maximum age of weekly snapshots"
    echo "                              (Default: 90, implies '--purge')"
    echo "  -m, --monthly=DAYS          Maximum age of monthly snapshots"
    echo "                              (Default: 365, implies '--purge')"
    echo "  -y, --yearly=DAYS           Maximum age of annual snapshots"
    echo "                              (Default: 730, implies '--purge')"
    echo ""
    echo " Positional Arguments:"
    echo "  SNAPDIR       Local snapshot location"
    echo "  SUBVOLUME     Subvolume to snapshot"
}

# Create some nice message printing functions
msg() { printf "${*}\n"; }
vmsg() { [ ${BUTTERY_VERBOSE} -eq 1 ] && msg "${*}"; }
warnmsg() { msg "${CBLD}${CYEL}WARNING:${CRES} ${*}"; }
errmsg() { msg "${CBLD}${CRED}ERROR:${CRES} ${*}"; }
die() { errmsg "${*}"; exit 1; }

# From https://stackoverflow.com/a/61835747
is_uint() { case "${1}" in ''|*[!0-9]*) return 1;; esac ; }

timestamp() {
    # This is super gross. Why can't GNU `date` support passing a
    # custom `strptime()` format like other `date` implementations?
    RDATE='\([0-9]\{4\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)'
    RTIME='\([0-9]\{2\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)'
    RCONV='\1-\2-\3 \4:\5:\6'
    # Bail out if the string isn't in the right format
    echo "${@}" | grep "^${RDATE}-${RTIME}$" &> /dev/null || return 1
    # Convert the date format into a timestamp
    date -d "$(echo "${@}" | sed "s/^${RDATE}-${RTIME}$/${RCONV}/")" '+%s'
}

subvol_name() {
    # FIXME - If your subvolume name contains a newline for some reason,
    # it will be truncated. I have no idea how to parse that reliably
    btrfs subvolume show "${@}" | head -n1 | sed 's|/|-|g' || \
        # The `head` command is likely to return a pipe error, so ignore it
        [ ${?} -eq 141 ] && return 0 || return ${?}
}

# Set up color codes for terminal output
if [ -t 1 ] && [ -t 2 ]; then
    CRED='\033[1;31m'
    CGRN='\033[1;32m'
    CYEL='\033[1;33m'
    CBLU='\033[1;34m'
    CPUR='\033[1;35m'
    CBLD='\033[1m'
    CRES='\033[0m'
else
    CRED=''
    CGRN=''
    CYEL=''
    CBLU=''
    CPUR=''
    CBLD=''
    CRES=''
fi

# ----------------------------------------------------------------------------
# Parse command line
# ----------------------------------------------------------------------------

BUTTERY_DRY_RUN=0
BUTTERY_VERBOSE=0
BUTTERY_REMOTE=
BUTTERY_REMOTE_CMD=btrfs
BUTTERY_REMOTE_NAME=remote
BUTTERY_PURGE=0
BUTTERY_PURGE_NAMES=
BUTTERY_PURGE_HOURLY=1
BUTTERY_PURGE_DAILY=14
BUTTERY_PURGE_WEEKLY=90
BUTTERY_PURGE_MONTHLY=365
BUTTERY_PURGE_YEARLY=730
BUTTERY_SNAPDIR=

while [ ${#} -gt 0 ]; do
    case "${1}" in
        --help) show_help; exit 0 ;;
        -n|--dry-run) BUTTERY_DRY_RUN=1 ;;
        -v|--verbose) BUTTERY_VERBOSE=1 ;;

        -r=*|--remote=*) BUTTERY_REMOTE="${1#*=}" ;;
        -c=*|--remote-cmd=*) BUTTERY_REMOTE_CMD="${1#*=}" ;;
        -N=*|--remote-name=*) BUTTERY_REMOTE_NAME="${1#*=}" ;;

        -p|--purge) BUTTERY_PURGE=1 ;;
        -p=*|--purge=*) BUTTERY_PURGE_NAMES="${BUTTERY_PURGE_NAMES}${1#*=}\n";
                        BUTTERY_PURGE=1 ;;
        -h=*|--hourly=*) BUTTERY_PURGE_HOURLY="${1#*=}"; BUTTERY_PURGE=1 ;;
        -d=*|--daily=*) BUTTERY_PURGE_DAILY="${1#*=}"; BUTTERY_PURGE=1 ;;
        -w=*|--weekly=*) BUTTERY_PURGE_WEEKLY="${1#*=}"; BUTTERY_PURGE=1 ;;
        -m=*|--monthly=*) BUTTERY_PURGE_MONTHLY="${1#*=}"; BUTTERY_PURGE=1 ;;
        -y=*|--yearly=*) BUTTERY_PURGE_YEARLY="${1#*=}"; BUTTERY_PURGE=1 ;;

        --) shift; break ;; # All options after '--' are positional
        -*) die "Unknown option '${1}' (see --help)" ;;
        *) break ;; # Everything after the options are positional
    esac
    shift # Move to the next argument
done

# Read the snapshot directory
[ ${#} -eq 0 ] && die "'SNAPDIR' must be specified. (see --help)"
BUTTERY_SNAPDIR="${1}"
shift

# Sanity checks
is_uint "${BUTTERY_PURGE_HOURLY}" || die "'--hourly' must be an integer"
is_uint "${BUTTERY_PURGE_DAILY}" || die "'--daily' must be an integer"
is_uint "${BUTTERY_PURGE_WEEKLY}" || die "'--weekly' must be an integer"
is_uint "${BUTTERY_PURGE_MONTHLY}" || die "'--monthly' must be an integer"
is_uint "${BUTTERY_PURGE_YEARLY}" || die "'--yearly' must be an integer"

# Check for root privileges
[ "$(id -u)" == "0" ] || \
    die "This script must be run as root in order to interact with Btrfs"

# If no subvolumes are given, and we're not purging, then nothing happens
if [ ${#} -le 0 ] && [ ${BUTTERY_PURGE} -eq 0 ]; then
    warnmsg "Nothing to be done"
    exit 0
fi

# Check the shell
vmsg "${CPUR}Shell:${CRES} '${SHELL}'"
if [ ! "${SHELL##*/}" == "ash" ] && [ ! "${SHELL##*/}" == "bash" ]; then
    warnmsg "Running in shell '${SHELL}'"
    warnmsg "This script is only tested with GNU 'bash' and Busybox 'ash'"
fi

# This will be the time stamp we use for all these snapshots
DATE_FORMAT='%Y%m%d-%H%M%S'
BUTTERY_DATE="$(date "+${DATE_FORMAT}")"
vmsg "${CPUR}Snapshot date:${CRES} '${BUTTERY_DATE}'"

[ ${BUTTERY_DRY_RUN} -eq 1 ] && \
    msg "${CYEL}The filesystem will not be modified (--dry-run)${CRES}"

# ----------------------------------------------------------------------------
# Create snapshots
# ----------------------------------------------------------------------------

if [ ${#} -ge 1 ]; then
    vmsg "${CGRN}>>>${CRES} Creating snapshots in '${BUTTERY_SNAPDIR}'"
    [ ${BUTTERY_DRY_RUN} -eq 0 ] && \
        btrfs -q filesystem sync "${BUTTERY_SNAPDIR}"

    for SUBVOLUME in "${@}"; do
        SUBNAME="$(subvol_name "${SUBVOLUME}")"
        SNAPSHOT="${BUTTERY_SNAPDIR}/${SUBNAME}_${BUTTERY_DATE}"
        LATEST="${BUTTERY_SNAPDIR}/${SUBNAME}_latest"

        if [ -z "${SUBNAME}" ]; then
            warnmsg "'${SUBVOLUME}' is not a Btrfs subvolume"
            continue
        fi

        # Take the snapshot
        msg "${CBLU}Snapshotting${CRES} '${SUBVOLUME}' as '${SUBNAME}'"
        if [ ${BUTTERY_DRY_RUN} -eq 0 ]; then
            touch -c "${SUBVOLUME}"

            if ! btrfs -q subvolume snap -r "${SUBVOLUME}" "${SNAPSHOT}"; then
                errmsg "Could not create a snapshot of '${SUBVOLUME}'"
                continue
            fi

            # Update the "latest" symlink
            vmsg "${CPUR}Updating symlink:${CRES} '${LATEST}'"
            if ! ln -snfT "${SNAPSHOT}" "${LATEST}"; then
                errmsg "Could not create a symlink at '${LATEST}'"
                continue
            fi
        fi
    done
fi

# ----------------------------------------------------------------------------
# Part two - Send snapshots to remote location
# ----------------------------------------------------------------------------

if [ ${#} -ge 1 ] && [ ! -z "${BUTTERY_REMOTE}" ]; then
    vmsg "${CGRN}>>>${CRES} Sending snapshots to '${BUTTERY_REMOTE}'"
    [ ${BUTTERY_DRY_RUN} -eq 0 ] && \
        btrfs -q filesystem sync "${BUTTERY_SNAPDIR}"

    # Only rarely update the pv output if we're not running in a terminal
    [ -t 1 ] && [ -t 2 ] && PV_INTERVAL=1 || PV_INTERVAL=3600

    for SUBVOLUME in "${@}"; do
        SUBNAME="$(subvol_name "${SUBVOLUME}")"
        SNAPSHOT="${BUTTERY_SNAPDIR}/${SUBNAME}_${BUTTERY_DATE}"
        LATEST="${BUTTERY_SNAPDIR}/${SUBNAME}_latest_${BUTTERY_REMOTE_NAME}"

        # We should have already warned above, so don't warn again
        [ -z "${SUBNAME}" ] && continue

        # If the snapshot couldn't be created above, skip sending it
        if ! subvol_name "${SNAPSHOT}" &> /dev/null; then
            vmsg "${CPUR}Missing:${CRES} '${SNAPSHOT}'"
            continue
        fi

        # Send the snapshot to the remote location
        msg "${CBLU}Sending${CRES} '${SNAPSHOT}'"
        if [ ${BUTTERY_DRY_RUN} -eq 0 ]; then
            if ! { [ -L "${LATEST}" ] && \
                   btrfs -q send -p "${LATEST}" "${SNAPSHOT}" || \
                   btrfs -q send "${SNAPSHOT}"
                 } | pv -btrW --interval ${PV_INTERVAL} | \
                     ${BUTTERY_REMOTE_CMD} -q receive "${BUTTERY_REMOTE}"; then
                errmsg "Could not send '${SNAPSHOT}'"
                continue
            fi

            vmsg "${CPUR}Updating symlink:${CRES} '${LATEST}'"
            if ! ln -snfT "${SNAPSHOT}" "${LATEST}"; then
                errmsg "Could not create a symlink at '${LATEST}'"
                continue
            fi
        fi
    done
fi

# ----------------------------------------------------------------------------
# Part three - Purge old snapshots
# ----------------------------------------------------------------------------

if [ ${BUTTERY_PURGE} -eq 1 ]; then
    vmsg "${CGRN}>>>${CRES} Purging old snapshots"
    [ ${BUTTERY_DRY_RUN} -eq 0 ] && \
        btrfs -q filesystem sync "${BUTTERY_SNAPDIR}"

    # Generate the cutoff times
    TIMESTAMP=$(timestamp "${BUTTERY_DATE}")
    CUTOFF_YEARLY=$((${TIMESTAMP} - (86400 * ${BUTTERY_PURGE_YEARLY})))
    CUTOFF_MONTHLY=$((${TIMESTAMP} - (86400 * ${BUTTERY_PURGE_MONTHLY})))
    CUTOFF_WEEKLY=$((${TIMESTAMP} - (86400 * ${BUTTERY_PURGE_WEEKLY})))
    CUTOFF_DAILY=$((${TIMESTAMP} - (86400 * ${BUTTERY_PURGE_DAILY})))
    CUTOFF_HOURLY=$((${TIMESTAMP} - (86400 * ${BUTTERY_PURGE_HOURLY})))

    [ ${BUTTERY_PURGE_YEARLY} -eq 0 ] || \
        vmsg "${CPUR}Yearly cutoff:${CRES} $(date -d "@${CUTOFF_YEARLY}")"
    [ ${BUTTERY_PURGE_MONTHLY} -eq 0 ] || \
        vmsg "${CPUR}Monthly cutoff:${CRES} $(date -d "@${CUTOFF_MONTHLY}")"
    [ ${BUTTERY_PURGE_WEEKLY} -eq 0 ] || \
        vmsg "${CPUR}Weekly cutoff:${CRES} $(date -d "@${CUTOFF_WEEKLY}")"
    [ ${BUTTERY_PURGE_DAILY} -eq 0 ] || \
        vmsg "${CPUR}Daily cutoff:${CRES} $(date -d "@${CUTOFF_DAILY}")"
    [ ${BUTTERY_PURGE_HOURLY} -eq 0 ] || \
        vmsg "${CPUR}Hourly cutoff:${CRES} $(date -d "@${CUTOFF_HOURLY}")"

    # Generate the list of pinned snapshots
    PINNED=
    for SYMLINK in "${BUTTERY_SNAPDIR}"/*; do
        [ -L "${SYMLINK}" ] || continue
        PINNED="${PINNED}$(readlink -fn "${SYMLINK}")\n"
    done
    PINNED="$(printf "${PINNED}" | sort -u)"
    [ -z "${PINNED}" ] || vmsg "${CPUR}Pinned snapshots:${CRES}" \
        "\n$(printf "${PINNED}" | sed 's/^/  /')"

    KEPT=
    PURGED=0
    for SNAPSHOT in "${BUTTERY_SNAPDIR}"/*; do
        # Skip non-directories
        [ -d "${SNAPSHOT}" ] || continue

        # Skip things not in the purge names list
        if [ ! -z "${BUTTERY_PURGE_NAMES}" ]; then
            SNAPNAME="${SNAPSHOT%_*}"  # We can't do '%_*' and '##*/' together
            printf "${BUTTERY_PURGE_NAMES}" | \
                grep "^${SNAPNAME##*/}$" &> /dev/null || continue
        fi

        # Get the timestamp, and skip paths that don't match the date format
        TIMESTAMP=$(timestamp "${SNAPSHOT#*_}" 2> /dev/null) || continue

        # Skip directories that aren't Btrfs subvolumes
        subvol_name "${SNAPSHOT}" &> /dev/null || continue

        # Figure out whether to keep this snapshot or not
        KEY=''
        [ ${TIMESTAMP} -ge ${CUTOFF_YEARLY} ] && KEY='%Y'
        [ ${TIMESTAMP} -ge ${CUTOFF_MONTHLY} ] && KEY='%Y%m'
        [ ${TIMESTAMP} -ge ${CUTOFF_WEEKLY} ] && KEY='%Y%m%V'
        [ ${TIMESTAMP} -ge ${CUTOFF_DAILY} ] && KEY='%Y%m%V%d'
        [ ${TIMESTAMP} -ge ${CUTOFF_HOURLY} ] && KEY='%Y%m%V%d%H'
        COMP="${SNAPSHOT%_*}_$(date -d "@${TIMESTAMP}" "+${KEY}")"
        if [ ! -z "${KEY}" ] && [ "${KEPT}" != "${COMP}" ]; then
            vmsg "${CBLU}Keeping${CRES} '${SNAPSHOT##*/}' for '${COMP##*_}'"
            KEPT="${COMP}"
            continue
        fi

        # Keep snapshots in the pinned list
        if [ ! -z "${PINNED}" ] && printf "${PINNED}" | \
                grep "^${SNAPSHOT}$" &> /dev/null; then
            vmsg "${CPUR}Pinned${CRES} '${SNAPSHOT##*/}'"
            continue
        fi

        # Delete this snapshot
        msg "${CRED}Deleting${CRES} '${SNAPSHOT##*/}'"
        if [ ${BUTTERY_DRY_RUN} -eq 0 ]; then
            if ! btrfs -q subvolume delete "${SNAPSHOT}"; then
                errmsg "Could not delete '${SNAPSHOT}'"
                continue
            fi
            PURGED=1
        fi
    done

    # Wait until the Btrfs cleaner is done removing snapshots
    if [ ${BUTTERY_DRY_RUN} -eq 0 ] && [ ${PURGED} -eq 1 ]; then
        msg "${CYEL}Waiting for subvolume cleanup to finish${CRES}"
        btrfs -q subvolume sync "${BUTTERY_SNAPDIR}" > /dev/null && \
            btrfs -q filesystem sync "${BUTTERY_SNAPDIR}" && \
                msg "${CGRN}Finished${CRES}" || \
                msg "${CYEL}Finished (${?})${CRES}"
    fi
fi
