#!/bin/bash
#
# Buttery: A snapshot tool for Btrfs.
#
# For usage help, invoke the script with the '--help' or '-h' arguments.
#
# COPYRIGHT INFO
#
# By Ryan "ZDBioHazard" Turner <zdbiohazard2@gmail.com>
# Copyright (c) 2015-2016
#
# LICENSE
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>
#

# ----------------------------------------------------------------------------
# Function definitions.
# ----------------------------------------------------------------------------

function show_help() {
    echo "Usage: $(basename "${0}") [OPTIONS] SNAPDIR SUBVOLUME [SUBVOLUME ...]"
    echo " OPTIONS:"
    echo "  -h  --help               Show this help and exit."
    echo "  -n  --dry-run            Only show commands that would run."
    echo ""
    echo "  -r  --remote='PATH'      Path to use as 'btrfs send' destination."
    echo "  -c  --remote-cmd='PATH'  Path to the 'btrfs' command for 'btrfs receive'."
    echo "                            (Default: 'btrfs') (See manual!)"
    echo ""
    echo "  -p  --purge              Purge old backups. (See manual!)"
    echo "  -d  --daily='DAYS'       Keep daily backups until they are 'DAYS' days old."
    echo "                            (Default: 7, implies '-p')"
    echo "  -w  --weekly='DAYS'      Keep weekly backups until they are 'DAYS' days old."
    echo "                            (Default: 31, implies '-p')"
    echo "  -m  --monthly='DAYS'     Keep monthly backups until they are 'DAYS' days old."
    echo "                            (Default: 365, implies '-p')"
    echo ""
    echo " Positional Arguments:"
    echo "  SNAPDIR      Where to locally store created backups."
    echo "  SUBVOLUME    A list of subvolumes to snapshot."
}

function errmsg(){
    echo -e "ERROR: ${@}" 1>&2
}

function dbgmsg(){
    [[ "${PURGE_DEBUG}" != "" ]] && echo -e "DEBUG: ${@}"
}

function short(){
    # TODO - Maybe pull actual snapshot name from 'btrfs sub show'
    [[ "${1}" == "/" ]] && echo "root" || echo "${1##*/}"
}

# ----------------------------------------------------------------------------
# Pre-everything checks.
# ----------------------------------------------------------------------------

# Make sure the running user is root.
if [[ "${EUID}" != "0" ]]; then
    errmsg "This script must be run with root privileges.\n"
    show_help
    exit 1
fi

# Check that all needed commands are present.
for COMMAND in 'btrfs' 'cut' 'date' 'grep' 'pv' \
               'sed' 'sort' 'tail' 'touch' 'tr'; do
    which ${COMMAND} &> /dev/null
    if [[ "${?}" != "0" ]]; then
        errmsg "The '${COMMAND}' command is not available in \$PATH."
        exit 3
    fi
done

# ----------------------------------------------------------------------------
# Configuration variables.
# ----------------------------------------------------------------------------

DRY_RUN=""
SNAPDIR=""
SUBVOLUMES=()

REMOTE_SNAPDIR=""
REMOTE_COMMAND=""

PURGE_ENABLED=""
PURGE_DAILY="7"
PURGE_WEEKLY="31"
PURGE_MONTHLY="365"
PURGE_DEBUG=""

# ----------------------------------------------------------------------------
# Command line processing.
# ----------------------------------------------------------------------------

while [[ "${#}" -gt "0" ]]; do
    case "${1}" in
        -h|--help) show_help; exit 0 ;;
        -n|--dry-run) DRY_RUN="echo >>>"; shift ;;

        -r|--remote=*) REMOTE_SNAPDIR="${1#*=}"; shift ;;
        -c|--remote-cmd=*) REMOTE_COMMAND="${1#*=}"; shift ;;

        -p|--purge) PURGE_ENABLED="1"; shift ;;
        -d|--daily=*) PURGE_ENABLED="1"; PURGE_DAILY="${1#*=}"; shift ;;
        -w|--weekly=*) PURGE_ENABLED="1"; PURGE_WEEKLY="${1#*=}"; shift ;;
        -m|--monthly=*) PURGE_ENABLED="1"; PURGE_MONTHLY="${1#*=}"; shift ;;
        --purge-debug) PURGE_DEBUG="1"; shift ;;

        -*|--*)
            errmsg "Unknown option '${1}'"
            show_help
            exit 1
            ;;

        *)
            # Look for ${SNAPDIR} first.
            if [[ -z "${SNAPDIR}" ]]; then
                if [[ ! -d "${1}" ]]; then
                    errmsg "SNAPDIR must be a directory.\n"
                    show_help
                    exit 2
                fi
                SNAPDIR="${1}"
                shift
                continue
            fi

            # Btrfs subvolumes should always be directories.
            # Try that before asking Btrfs about it.
            if [[ -d "${1}" ]]; then
                btrfs subvolume show "${1}" &> /dev/null
                if [[ "${?}" == "0" ]]; then
                    SUBVOLUMES+=("${1}")
                    shift
                    continue
                fi
            fi

            errmsg "SUBVOLUME '${1}' is not a Btrfs subvolume.\n"
            show_help
            exit 2
            ;;
    esac
done

# ----------------------------------------------------------------------------
# Perform sanity checks on the configuration variables.
# ----------------------------------------------------------------------------

# Strip any forward slashes at the end of $SNAPDIR
SNAPDIR="$(echo "${SNAPDIR}" | sed -e 's/\/*$//')"
if [[ -z "${SNAPDIR}" ]]; then
    errmsg "Must specify SNAPDIR.\n"
    show_help
    exit 2
fi

if [[ "${PURGE_ENABLED}" == "" && "${#SUBVOLUMES[@]}" == "0" ]]; then
    errmsg "Must specify at least one SUBVOLUME if not only purging.\n"
    show_help
    exit 2
fi

if [[ ! -z "${REMOTE_COMMAND}" && -z "${REMOTE_SNAPDIR}" ]]; then
    errmsg "Must specify --remote-dir when using --remote-cmd\n"
    show_help
    exit 2
fi

# Make sure the purge cutoff counts make sense.
if [[ "${PURGE_DAILY}" == "0" || ( "${PURGE_WEEKLY}" != "0" && \
      "${PURGE_DAILY}" -gt "${PURGE_WEEKLY}" ) ]]; then
    PURGE_WEEKLY="${PURGE_DAILY}"
fi
if [[ "${PURGE_WEEKLY}" == "0" || ( "${PURGE_MONTHLY}" != "0" && \
      "${PURGE_WEEKLY}" -gt "${PURGE_MONTHLY}" ) ]]; then
    PURGE_MONTHLY="${PURGE_WEEKLY}"
fi

# ----------------------------------------------------------------------------
# It's Star Trek time guys!
# ----------------------------------------------------------------------------

# This will be the timestamp we use for all these snapshots.
DATE="$(date '+%Y-%m-%d_%H-%M-%S')"
TODAY="${DATE%_*}"

echo -e "\nSyncing filesystem"
${DRY_RUN} btrfs filesystem sync "${SNAPDIR}"

if [[ "${#SUBVOLUMES[@]}" != "0" ]]; then

    # ------------------------------------------------------------------------
    # Create snapshots.
    # ------------------------------------------------------------------------

    echo -e "\nCreating snapshots"
    for SUBVOLUME in "${SUBVOLUMES[@]}"; do
        SNAPSHOT="${SNAPDIR}/$(short "${SUBVOLUME}")_${DATE}"
        ${DRY_RUN} touch "${SUBVOLUME}" # Set the modification time to now.
        ${DRY_RUN} btrfs subvolume snapshot -r "${SUBVOLUME}" "${SNAPSHOT}"
        if [[ "${?}" != "0" ]]; then
            errmsg "Creating snapshot of '${SUBVOLUME}' failed!"
            exit 1
        fi

        # Manage the local 'latest' symlink.
        LATEST="${SNAPDIR}/$(short "${SUBVOLUME}")_latest"
        if [[ ! -e "${LATEST}" || -L "${LATEST}" ]]; then
            ${DRY_RUN} ln -snf "${SNAPSHOT}" "${LATEST}"
        fi
    done

    # ------------------------------------------------------------------------
    # Send snapshots to remote location.
    # ------------------------------------------------------------------------

    if [[ ! -z "${REMOTE_SNAPDIR}" ]]; then
        echo -e "\nSyncing filesystem"
        ${DRY_RUN} btrfs filesystem sync "${SNAPDIR}"

        echo -e "\nSending snapshots to the remote location"
        for SUBVOLUME in "${SUBVOLUMES[@]}"; do
            echo -e "\nSending ${SUBVOLUME}"
            SNAPSHOT="${SNAPDIR}/$(short "${SUBVOLUME}")_${DATE}"
            LATEST="${SNAPDIR}/$(short "${SUBVOLUME}")_latest_remote"

            # Try to find the parent snapshot.
            PARENT_SNAPSHOT=""
            if [[ -L "${LATEST}" && -e "${LATEST}" ]]; then
                PARENT_SNAPSHOT="$(readlink -f "${LATEST}")"
            fi

            if [[ "${DRY_RUN}" != "" ]]; then
                if [[ "${PARENT_SNAPSHOT}" != "" ]]; then
                    echo ">>> btrfs send -p \"${PARENT_SNAPSHOT}\" \"${SNAPSHOT}\" |" \
                         "pv -trab | ${REMOTE_COMMAND} btrfs receive \"${REMOTE_SNAPDIR}\""
                else
                    echo ">>> btrfs send \"${SNAPSHOT}\" |" \
                         "pv -trab | ${REMOTE_COMMAND} btrfs receive \"${REMOTE_SNAPDIR}\""
                fi
                SEND_RETCODES="0 0 0"
            else
                # If stdout and stderr are a terminal, then we can use pv's
                # live output. If it's a pipe or a file or something, do some
                # fancy trickery to only output the last line of pv, so we
                # can still get the transfer size and speed in log files, etc.
                if [[ -t 1 && -t 2 ]]; then
                    if [[ "${PARENT_SNAPSHOT}" != "" ]]; then
                        btrfs send -p "${PARENT_SNAPSHOT}" "${SNAPSHOT}" | \
                            pv -trab | \
                            ${REMOTE_COMMAND} btrfs receive "${REMOTE_SNAPDIR}"
                    else
                        btrfs send "${SNAPSHOT}" | pv -trab | \
                            ${REMOTE_COMMAND} btrfs receive "${REMOTE_SNAPDIR}"
                    fi
                    SEND_RETCODES="${PIPESTATUS[@]}"
                else
                    # TODO - Explain how this works. It's pretty neat.
                    SEND_RETCODES="$( {
                        {
                            if [[ "${PARENT_SNAPSHOT}" != "" ]]; then
                                btrfs send -p "${PARENT_SNAPSHOT}" "${SNAPSHOT}" | \
                                pv -tabf 2>&3 | \
                                ${REMOTE_COMMAND} btrfs receive "${REMOTE_SNAPDIR}" 1>&2
                            else
                                btrfs send "${SNAPSHOT}" | pv -tabf 2>&3 | \
                                ${REMOTE_COMMAND} btrfs receive "${REMOTE_SNAPDIR}" 1>&2
                            fi

                            echo "${PIPESTATUS[@]}" 1>&4
                        } 3>&1 | tr '\r' '\n' | sed -e 's/^\s*//' -e '/^$/d' | tail -n1 1>&2
                    } 4>&1 )"
                fi
            fi

            # Make sure every command in the pipe exited cleanly.
            if [[ "${SEND_RETCODES}" != "0 0 0" ]]; then
                errmsg "Sending '${SNAPSHOT}' failed!"
                errmsg "Exit codes were '${SEND_RETCODES}'"
                continue # Rather than exit, try to send the other snapshots.
            fi

            # Manage the remote 'latest' symlink.
            if [[ ! -e "${LATEST}" || -L "${LATEST}" ]]; then
                ${DRY_RUN} ln -snf "${SNAPSHOT}" "${LATEST}"
            fi
        done
    fi
fi

# ----------------------------------------------------------------------------
# Purge old snapshots.
# ----------------------------------------------------------------------------

# # Bail out now if purging is disabled.
if [[ "${PURGE_ENABLED}" != "" ]]; then
    SNAP_DATEFORMAT="\([0-9]\{4\}\)\(-\([0-9]\)\{2\}\)\{2\}"
    SNAP_TIMEFORMAT="\([0-9]\{2\}\)\(-\([0-9]\)\{2\}\)\{2\}"
    SNAP_FORMAT="^[[:print:]]\+_${SNAP_DATEFORMAT}_${SNAP_TIMEFORMAT}$"
    SNAP_LAST=""
    LATEST_REMOTE=""
    PURGE_LIST=()
    declare -A MSEEN
    declare -A WSEEN

    echo -e "\nPurging old snapshots"
    # This command chain should get a list of all the subvolumes
    # in ${SNAPDIR} that match the backup name format,
    # sorted by subvolume and date. The sort order is important
    # to keep the subvolume date detector sane.
    for SNAPSHOT in $(ls "${SNAPDIR}" | sed -e 's/\/$//' | \
                      grep -e "${SNAP_FORMAT}" | sort -t_ -k 1,1 -k 2,3); do

        # Make sure this item really is a Btrfs subvolume.
        if [[ -d "${SNAPDIR}/${SNAPSHOT}" ]]; then
            btrfs subvolume show "${SNAPDIR}/${SNAPSHOT}" &> /dev/null
            if [[ "${?}" != "0" ]]; then
                continue
            fi
        fi

        SNAP_NAME="$(echo "${SNAPSHOT}" | rev | cut -d_ -f3- | rev | \
                     sed -e "s|^${SNAPDIR}\/||")"
        SNAP_DATE="$(echo "${SNAPSHOT}" | rev | cut -d_ -f2 | rev)"

        # Convert the snapshot date to a year-month and year-week index.
        MSLOT="$(date -d "${SNAP_DATE}" '+%Y-%m')"
        WSLOT="$(date -d "${SNAP_DATE}" '+%Y-%V')"

        # Reset our counters when a new base subvolume shows up.
        if [[ "${SNAP_NAME}" != "${SNAP_LAST}" ]]; then
            dbgmsg "New subvolume (${SNAP_NAME})"
            LATEST_REMOTE="$(readlink -f "${SNAPDIR}/${SNAP_NAME}_latest_remote")"
            unset MSEEN; declare -A MSEEN
            unset WSEEN; declare -A WSEEN
        fi
        SNAP_LAST="${SNAP_NAME}"

        # Don't purge the latest remote snapshot.
        if [[ "${LATEST_REMOTE}" == "${SNAPSHOT}" ]]; then
            dbgmsg "Keeping ${SNAP_NAME} ${SNAP_DATE} (latest remote)"
            continue
        fi

        # If the snapshot is older than the monthly cutoff, purge it.
        if [[ "${PURGE_MONTHLY}" != "0" && \
              "$(date -d "${SNAP_DATE}" '+%s')" -le \
              "$(date -d "${TODAY} - ${PURGE_MONTHLY} days" '+%s')" ]]; then
            : # Do nothing here. Purge this old backup below.
        # If the snapshot is older than the weekly cutoff, and
        # we haven't seen a snapshot for that month, keep it.
        elif [[ "${PURGE_WEEKLY}" != "0" && \
                "$(date -d "${SNAP_DATE}" '+%s')" -le \
                "$(date -d "${TODAY} - ${PURGE_WEEKLY} days" '+%s')" ]]; then
            if [[ "${MSEEN["${MSLOT}"]}" != "1" ]]; then
                dbgmsg "Keeping ${SNAP_NAME} ${SNAP_DATE} (monthly)"
                MSEEN["${MSLOT}"]="1"
                continue
            fi
        # If the snapshot is older than the daily cutoff, and
        # we haven't seen a snapshot for that week, keep it.
        elif [[ "${PURGE_DAILY}" != "0" && \
                "$(date -d "${SNAP_DATE}" '+%s')" -le \
                "$(date -d "${TODAY} - ${PURGE_DAILY} days" '+%s')" ]]; then
            if [[ "${WSEEN["${WSLOT}"]}" != "1" ]]; then
                dbgmsg "Keeping ${SNAP_NAME} ${SNAP_DATE} (weekly)"
                WSEEN["${WSLOT}"]="1"
                continue
            fi
        # If the snapshot is younger than the daily cutoff, keep it.
        else
            dbgmsg "Keeping ${SNAP_NAME} ${SNAP_DATE} (daily)"
            continue
        fi

        dbgmsg "Purging ${SNAP_NAME} ${SNAP_DATE}"
        PURGE_LIST+=("${SNAPDIR}/${SNAPSHOT}")
    done

    if [[ "${#PURGE_LIST[@]}" == "0" ]]; then
        echo "There are no snapshots to be purged"
    else
        echo "Purging ${#PURGE_LIST[@]} snapshots"
        ${DRY_RUN} btrfs subvolume delete --commit-each ${PURGE_LIST[@]}
    fi
fi

exit 0
# You've reached the end of the script. There's no more. Not even a newline.
